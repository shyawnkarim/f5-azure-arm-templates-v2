{
	"$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
	"contentVersion": "1.2.0.0",
	"parameters": {
		"uniqueString": {
			"metadata": {
				"description": "REQUIRED - A prefix that will be used to name template resources. Because some resources require globally unique names, we recommend using a unique value."
			},
			"type": "string"
		},
		"externalLoadBalancerName": {
			"defaultValue": "None",
			"metadata": {
				"description": "Valid values include 'None', or an external load balancer name. A value of 'None' will not create external load balancer. Specifying a name creates a external load balancer with the name specified."
			},
			"type": "string"
		},
		"internalLoadBalancerName": {
			"defaultValue": "None",
			"metadata": {
				"description": "Valid values include 'None', or an internal load balancer name. A value of 'None' will not create internal load balancer. Specifying a name creates a internal load balancer with the name specified."
			},
			"type": "string"
		},
		"internalLoadBalancerProbePort": {
			"defaultValue": "3456",
			"metadata": {
				"description": "Specify a TCP port for the internal load balancer to monitor. If you specified None for provision internal load balancer, this setting has no effect."
			},
			"type": "string"
		},
		"internalSubnetId": {
			"defaultValue": "",
			"metadata": {
				"description": "Enter subnet id to use for frontend internal load balancer configuration. If you specified None for provision internal load balancer, this setting has no effect."
			},
			"type": "string"
		},
		"loadBalancerRulePorts": {
			"defaultValue": [
				"80",
				"443"
			],
			"metadata": {
				"description": "Valid values include valid tcp ports. Enter an array of ports your applications use. Example: '[80,443,445]'"
			},
			"type": "array"
		},
		"nsg0": {
            "defaultValue": [
				{
					"destinationPortRanges": ["22","8443"],
					"sourceAddressPrefix": "",
					"protocol": "Tcp"
				},
				{
					"destinationPortRanges": ["80","443"],
					"sourceAddressPrefix": "",
					"protocol": "Tcp"
				}
			],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
		"nsg1": {
            "defaultValue": [
				{
					"destinationPortRanges": ["80","443"],
					"sourceAddressPrefix": "",
					"protocol": "Tcp"
				}
			],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
		"nsg2": {
            "defaultValue": [
				{
					"destinationPortRanges": ["80","443"],
					"sourceAddressPrefix": "",
					"protocol": "Tcp"
				}
			],
            "type": "array",
            "metadata": {
                "description": "Valid values include an array containing network security rule property objects, or an empty array. A non-empty array value creates a security group and inbound rules using the destinationPortRanges and sourceAddressPrefix values provided for each object."
            }
        },
		"numberPublicExternalIpAddresses": {
			"defaultValue": 1,
			"allowedValues": [
				0,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			],
			"metadata": {
				"description": "Enter the number of public external ip address to create. At least one is required to build ELB."
			},
			"type": "int"
		},
		"numberPublicMgmtIpAddresses": {
			"defaultValue": 0,
			"allowedValues": [
				0,
				1,
				2,
				3,
				4,
				5,
				6,
				7,
				8,
				9,
				10
			],
			"metadata": {
				"description": "Enter the number of public mgmt ip addresses to create."
			},
			"type": "int"
		},
		"tagValues": {
			"defaultValue": {
				"application": "APP",
				"cost": "COST",
				"environment": "ENV",
				"group": "GROUP",
				"owner": "OWNER"
			},
			"metadata": {
				"description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
			},
			"type": "object"
		}
	},
	"variables": {
		"appLoadBalancerFrontEnd": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), variables('constructFrontEndIPConfigID'), union(variables('constructFrontEndIPConfigID'), variables('mgmtLoadBalancerFrontEnd')))]",
		"copy": [
			{
				"count": "[parameters('numberPublicExternalIpAddresses')]",
				"input": {
					"name": "[concat('loadBalancerFrontEnd', copyIndex('constructFrontEndIPConfigID'))]",
					"properties": {
						"publicIPAddress": {
							"id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip', copyIndex('constructFrontEndIPConfigID')))]"
						}
					}
				},
				"name": "constructFrontEndIPConfigID"
			},
			{
				"count": "[variables('loadBalancerRulePortsLength')]",
				"input": {
					"name": "[concat('app-', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')])]",
					"properties": {
						"backendAddressPool": {
							"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
						},
						"backendPort": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')]]",
						"frontendIPConfiguration": {
							"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd0')]"
						},
						"frontendPort": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')]]",
						"idleTimeoutInMinutes": 15,
						"probe": {
							"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/probes/tcp_probe_', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerRule')])]"
						},
						"protocol": "Tcp"
					}
				},
				"name": "constructLoadBalancerRule"
			},
			{
				"count": "[variables('loadBalancerRulePortsLength')]",
				"input": {
					"name": "[concat('tcp_probe_', parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerProbes')])]",
					"properties": {
						"intervalInSeconds": 15,
						"numberOfProbes": 3,
						"port": "[parameters('loadBalancerRulePorts')[copyIndex('constructLoadBalancerProbes')]]",
						"protocol": "Tcp"
					}
				},
				"name": "constructLoadBalancerProbes"
			},
			{
				"count": "[variables('nsg0Length')]",
				"input": {
					"name": "[concat('nsg0_allow_', copyIndex('constructNsg0Array'))]",
					"properties": {
						"access": "Allow",
						"description": "NSG0 Allow",
						"destinationAddressPrefix": "*",
						"destinationPortRanges": "[parameters('nsg0')[copyIndex('constructNsg0Array')].destinationPortRanges]",
						"direction": "Inbound",
						"priority": "[int(concat('10', copyIndex('constructNsg0Array')))]",
						"protocol": "[parameters('nsg0')[copyIndex('constructNsg0Array')].protocol]",
						"sourceAddressPrefix": "[parameters('nsg0')[copyIndex('constructNsg0Array')].sourceAddressPrefix]",
						"sourcePortRange": "*"
					}
				},
				"name": "constructNsg0Array"
			},
			{
				"count": "[variables('nsg1Length')]",
				"input": {
					"name": "[concat('nsg1_allow_', copyIndex('constructNsg1Array'))]",
					"properties": {
						"access": "Allow",
						"description": "NSG1 Allow",
						"destinationAddressPrefix": "*",
						"destinationPortRanges": "[parameters('nsg1')[copyIndex('constructNsg1Array')].destinationPortRanges]",
						"direction": "Inbound",
						"priority": "[int(concat('10', copyIndex('constructNsg1Array')))]",
						"protocol": "[parameters('nsg1')[copyIndex('constructNsg1Array')].protocol]",
						"sourceAddressPrefix": "[parameters('nsg1')[copyIndex('constructNsg1Array')].sourceAddressPrefix]",
						"sourcePortRange": "*"
					}
				},
				"name": "constructNsg1Array"
			},
			{
				"count": "[variables('nsg2Length')]",
				"input": {
					"name": "[concat('nsg2_allow_', copyIndex('constructNsg2Array'))]",
					"properties": {
						"access": "Allow",
						"description": "NSG2 Allow",
						"destinationAddressPrefix": "*",
						"destinationPortRanges": "[parameters('nsg2')[copyIndex('constructNsg2Array')].destinationPortRanges]",
						"direction": "Inbound",
						"priority": "[int(concat('10', copyIndex('constructNsg2Array')))]",
						"protocol": "[parameters('nsg2')[copyIndex('constructNsg2Array')].protocol]",
						"sourceAddressPrefix": "[parameters('nsg2')[copyIndex('constructNsg2Array')].sourceAddressPrefix]",
						"sourcePortRange": "*"
					}
				},
				"name": "constructNsg2Array"
			}
		],
		"uniqueString": "[toLower(parameters('uniqueString'))]",
		"emptyArray": [],
		"inboundNatPoolsArray": [
			{
				"name": "sshnatpool",
				"properties": {
					"backendPort": 22,
					"frontendIPConfiguration": {
						"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerMgmtFrontEnd')]"
					},
					"frontendPortRangeEnd": 50100,
					"frontendPortRangeStart": 50001,
					"protocol": "Tcp"
				}
			},
			{
				"name": "mgmtnatpool",
				"properties": {
					"backendPort": 8443,
					"frontendIPConfiguration": {
						"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerMgmtFrontEnd')]"
					},
					"frontendPortRangeEnd": 50200,
					"frontendPortRangeStart": 50101,
					"protocol": "Tcp"
				}
			}
		],
		"loadBalancerBackEnd": [
			{
				"name": "loadBalancerBackEnd"
			}
		],
		"loadBalancerBackEndArray": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), variables('loadBalancerBackEnd'), union(variables('loadBalancerBackEnd'), variables('loadBalancerMgmtBackEnd')))]",
		"loadBalancerMgmtBackEnd": [
			{
				"name": "loadBalancerMgmtBackEnd"
			}
		],
		"loadBalancerRulePortsLength": "[length(parameters('loadBalancerRulePorts'))]",
		"loadBalancingProbesArray": "[variables('constructLoadBalancerProbes')]",
		"loadBalancingRulesArray": "[variables('constructLoadBalancerRule')]",
		"mgmtLoadBalancerFrontEnd": [
			{
				"name": "loadBalancerMgmtFrontEnd",
				"properties": {
					"publicIPAddress": {
						"id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip0'))]"
					}
				}
			}
		],
		"networkApiVersion": "2019-04-01",
		"nsg0Array": "[variables('constructNsg0Array')]",
		"nsg0Id": "[if(greater(variables('nsg0Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg0Name'))), variables('emptyArray'))]",
		"nsg0Length": "[length(parameters('nsg0'))]",
		"nsg0Name": "[concat(variables('uniqueString'), '-nsg0')]",
		"nsg1Array": "[variables('constructNsg1Array')]",
		"nsg1Id": "[if(greater(variables('nsg1Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg1Name'))), variables('emptyArray'))]",
		"nsg1Length": "[length(parameters('nsg1'))]",
		"nsg1Name": "[concat(variables('uniqueString'), '-nsg1')]",
		"nsg2Array": "[variables('constructNsg2Array')]",
		"nsg2Id": "[if(greater(variables('nsg2Length'), 0), createArray(resourceId('Microsoft.Network/networkSecurityGroups', variables('nsg2Name'))), variables('emptyArray'))]",
		"nsg2Length": "[length(parameters('nsg2'))]",
		"nsg2Name": "[concat(variables('uniqueString'), '-nsg2')]",
		"outboundNsgRule": [
			{
				"name": "allow_loadBalancer_traffic",
				"properties": {
					"access": "Allow",
					"description": "Outbound traffic through load balancer",
					"destinationAddressPrefix": "AzureLoadBalancer",
					"destinationPortRange": "*",
					"direction": "Outbound",
					"priority": 200,
					"protocol": "Tcp",
					"sourceAddressPrefix": "*",
					"sourcePortRange": "*"
				}
			}
		],
		"outboundRuleConfigArray": [
			{
				"name": "outboundRuleForInit",
				"properties": {
					"backendAddressPool": {
						"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/backendAddressPools/loadBalancerMgmtBackEnd')]"
					},
					"frontendIPConfigurations": [
						{
							"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerMgmtFrontEnd')]"
						}
					],
					"protocol": "All"
				}
			}
		]
	},
	"resources": [
		{
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('nsg0Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[variables('nsg0Array')]"
            },
            "condition": "[not(empty(parameters('nsg0')))]"
        },
        {
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('nsg1Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg1Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg1')))]"
        },
		{
            "type": "Microsoft.Network/networkSecurityGroups",
            "apiVersion": "[variables('networkApiVersion')]",
            "name": "[variables('nsg2Name')]",
            "location": "[resourceGroup().location]",
            "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
            "properties": {
                "securityRules": "[union(variables('nsg2Array'), variables('outboundNsgRule'))]"
            },
            "condition": "[not(empty(parameters('nsg2')))]"
        },
		{
			"apiVersion": "[variables('networkApiVersion')]",
			"condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicMgmtIpAddresses')]",
				"name": "mgmtpipcopy"
			},
			"location": "[resourceGroup().location]",
			"name": "[concat(variables('uniqueString'), '-mgmt-pip', copyIndex())]",
			"properties": {
				"dnsSettings": {
					"domainNameLabel": "[concat(variables('uniqueString'), '-mgmt', copyIndex(0))]"
				},
				"idleTimeoutInMinutes": 30,
				"publicIPAllocationMethod": "Static"
			},
			"sku": {
				"name": "Standard"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.Network/publicIPAddresses"
		},
		{
			"apiVersion": "[variables('networkApiVersion')]",
			"condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicExternalIpAddresses')]",
				"name": "apppipcopy"
			},
			"location": "[resourceGroup().location]",
			"name": "[concat(variables('uniqueString'), '-app-pip', copyIndex())]",
			"properties": {
				"dnsSettings": {
					"domainNameLabel": "[concat(variables('uniqueString'), '-app', copyIndex(0))]"
				},
				"idleTimeoutInMinutes": 30,
				"publicIPAllocationMethod": "Static"
			},
			"sku": {
				"name": "Standard"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.Network/publicIPAddresses"
		},
		{
			"apiVersion": "[variables('networkApiVersion')]",
			"condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
			"dependsOn": [
				"apppipcopy"
			],
			"location": "[resourceGroup().location]",
			"name": "[if(not(equals(tolower(parameters('externalLoadBalancerName')), string('none'))), parameters('externalLoadBalancerName'), string('none1'))]",
			"properties": {
				"backendAddressPools": "[variables('loadBalancerBackEndArray')]",
				"frontendIPConfigurations": "[variables('appLoadBalancerFrontEnd')]",
				"inboundNatPools": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), json('null'), variables('inboundNatPoolsArray'))]",
				"loadBalancingRules": "[variables('loadBalancingRulesArray')]",
				"outboundRules": "[if(equals(parameters('numberPublicMgmtIpAddresses'), 0), json('null'), variables('outboundRuleConfigArray'))]",
				"probes": "[variables('loadBalancingProbesArray')]"
			},
			"sku": {
				"name": "Standard"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.Network/loadBalancers"
		},
		{
			"apiVersion": "[variables('networkApiVersion')]",
			"condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
			"location": "[resourceGroup().location]",
			"name": "[parameters('internalLoadBalancerName')]",
			"properties": {
				"backendAddressPools": [
					{
						"name": "loadBalancerBackEnd"
					}
				],
				"frontendIPConfigurations": [
					{
						"name": "loadBalancerFrontEnd",
						"properties": {
							"privateIPAllocationMethod": "Dynamic",
							"subnet": {
								"id": "[parameters('internalSubnetId')]"
							}
						}
					}
				],
				"loadBalancingRules": [
					{
						"name": "allProtocolLbRule",
						"properties": {
							"backendAddressPool": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
							},
							"backendPort": 0,
							"enableFloatingIP": false,
							"frontendIPConfiguration": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
							},
							"frontendPort": 0,
							"idleTimeoutInMinutes": 15,
							"loadDistribution": "Default",
							"probe": {
								"id": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/probes/tcp-probe-', parameters('internalLoadBalancerProbePort'))]"
							},
							"protocol": "All"
						}
					}
				],
				"probes": [
					{
						"name": "[concat('tcp-probe-', parameters('internalLoadBalancerProbePort'))]",
						"properties": {
							"intervalInSeconds": 5,
							"numberOfProbes": 2,
							"port": "[parameters('internalLoadBalancerProbePort')]",
							"protocol": "Tcp"
						}
					}
				]
			},
			"sku": {
				"name": "Standard"
			},
			"tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
			"type": "Microsoft.Network/loadBalancers"
		}
	],
	"outputs": {
		"externalIpIds": {
			"condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicExternalIpAddresses')]",
				"input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip', copyIndex()))]"
			},
			"type": "array"
		},
		"externalIps": {
			"condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicExternalIpAddresses')]",
				"input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip', copyIndex()))).ipAddress]"
			},
			"type": "array"
		},
		"externalIpDns": {
			"condition": "[greater(parameters('numberPublicExternalIpAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicExternalIPAddresses')]",
				"input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-app-pip', copyIndex()))).dnsSettings.fqdn]"
			},
			"type": "array"
		},
		"externalBackEndLoadBalancerId": {
			"condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
		},
		"externalBackEndMgmtLoadBalancerId": {
			"condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), greater(parameters('numberPublicMgmtIpAddresses'), 0))]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/backendAddressPools/loadBalancerMgmtBackEnd')]"
		},
		"externalFrontEndLoadBalancerId": {
			"condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
			"copy": {
				"count": "[parameters('numberPublicExternalIpAddresses')]",
				"input": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/frontendIPConfigurations/loadBalancerFrontEnd', copyIndex())]"
			},
			"type": "array"
		},
		"externalFrontEndLoadBalancerInboundId": {
			"condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), equals(parameters('numberPublicMgmtIpAddresses'), 0))]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/frontendIPConfigurations/loadBalancerMgmtFrontEnd')]"
		},
		"externalFrontEndMgmtLoadBalancerId": {
			"condition": "[and(not(equals(toLower(parameters('externalLoadBalancerName')), string('none'))), greater(parameters('numberPublicMgmtIpAddresses'), 0))]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/frontendIPConfigurations/loadBalancerMgmtFrontEnd')]"
		},
		"externalLoadBalancer": {
			"condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
			"type": "string",
			"value": "[resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName'))]"
		},
		"externalLoadBalancerProbesId": {
			"condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
			"copy": {
				"count": "[variables('loadBalancerRulePortsLength')]",
				"input": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/probes/tcp_probe_', parameters('loadBalancerRulePorts')[copyIndex()])]"
			},
			"type": "array"
		},
		"externalLoadBalancerRulesId": {
			"condition": "[not(equals(toLower(parameters('externalLoadBalancerName')), string('none')))]",
			"copy": {
				"count": "[variables('loadBalancerRulePortsLength')]",
				"input": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/loadBalancingRules/app-', parameters('loadBalancerRulePorts')[copyIndex()])]"
			},
			"type": "array"
		},
		"inboundMgmtNatPool": {
			"condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/inboundNatPools/mgmtnatpool')]"
		},
		"inboundSshNatPool": {
			"condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('externalLoadBalancerName')), '/inboundNatPools/sshnatpool')]"
		},
		"internalBackEndLoadBalancerId": {
			"condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
		},
		"internalFrontEndLoadBalancerIp": {
			"condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
			"type": "string",
			"value": "[reference(parameters('internalLoadBalancerName')).frontendIPConfigurations[0].properties.privateIPAddress]"
		},
		"internalLoadBalancerProbeId": {
			"condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
			"type": "string",
			"value": "[concat(resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName')), '/probes/tcp-probe-', parameters('internalLoadBalancerProbePort'))]"
		},
		"internalLoadBalancer": {
			"condition": "[not(equals(toLower(parameters('internalLoadBalancerName')), string('none')))]",
			"type": "string",
			"value": "[resourceId('Microsoft.Network/loadBalancers', parameters('internalLoadBalancerName'))]"
		},
		"mgmtIpIds": {
			"condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicMgmtIpAddresses')]",
				"input": "[resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip', copyIndex()))]"
			},
			"type": "array"
		},
		"mgmtIps": {
			"condition": "[greater(parameters('numberPublicMgmtIpAddresses'), 0)]",
			"copy": {
				"count": "[parameters('numberPublicMgmtIpAddresses')]",
				"input": "[reference(resourceId('Microsoft.Network/publicIPAddresses', concat(variables('uniqueString'), '-mgmt-pip', copyIndex()))).ipAddress]"
			},
			"type": "array"
		},
		"nsg0Id": {
            "condition": "[not(empty(parameters('nsg0')))]",
            "type": "string",
            "value": "[variables('nsg0Id')[0]]"
        },
		"nsg1Id": {
            "condition": "[not(empty(parameters('nsg1')))]",
            "type": "string",
            "value": "[variables('nsg1Id')[0]]"
        },
		"nsg2Id": {
            "condition": "[not(empty(parameters('nsg2')))]",
            "type": "string",
            "value": "[variables('nsg2Id')[0]]"
        },
		"nsgIds": {
			"value": "[union(variables('nsg0Id'), variables('nsg1Id'), variables('nsg2Id'))]",
			"type": "array"
		}
	}
}
