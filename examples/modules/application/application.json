{
  "$schema": "https://schema.management.azure.com/schemas/2019-08-01/deploymentTemplate.json#",
  "contentVersion": "1.2.0.0",
  "parameters": {
    "adminUsername": {
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Admin username applied to BIG-IP Virtual Machine."
      },
      "type": "string"
    },
    "sshKey": {
      "metadata": {
        "description": "REQUIRED - Supply the public key that will be used for SSH authentication to the BIG-IP and application virtual machines."
      },
      "type": "string"
    },
    "createAutoscaleGroup": {
      "defaultValue": true,
      "metadata": {
        "description": "Choose true to create the application instances in an autoscaling configuration."
      },
      "type": "bool"
    },
    "instanceName": {
      "defaultValue": "vm01",
      "metadata": {
        "description": "VM instance name."
      },
      "type": "string"
    },
    "instanceType": {
      "allowedValues": [
        "Standard_D2s_v3"
      ],
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "Enter valid instance type."
      },
      "type": "string"
    },
    "subnetId": {
      "metadata": {
        "description": "REQUIRED - Enter the subnet ID to use."
      },
      "type": "string"
    },
    "nsgId": {
      "defaultValue": "",
      "metadata": {
        "description": "Enter security group id to use. Use default if you do not wish to apply an NSG policy."
      },
      "type": "string"
    },
    "appContainerName": {
      "defaultValue": "f5devcentral/f5-demo-app:latest",
      "metadata": {
        "description": "The docker container to use when deploying the example application."
      },
      "type": "string"
    },
    "cloudInitUrl": {
      "defaultValue": "",
      "metadata": {
        "description": "URl to cloud-init file used for customizing VM."
      },
      "type": "string"
    },
    "tagValues": {
      "defaultValue": {
        "application": "APP",
        "cost": "COST",
        "environment": "ENV",
        "group": "GROUP",
        "owner": "OWNER"
      },
      "metadata": {
        "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
      },
      "type": "object"
    }
  },
  "variables": {
    "computeApiVersion": "2019-12-01",
    "networkApiVersion": "2020-06-01",
    "storageApiVersion": "2017-10-01",
    "cloudInit": "[concat('#include\n',parameters('cloudInitUrl'))]",
    "commandToExecute": "[concat('sleep 60; apt-get update -y; apt-get -y install docker.io; docker run --name f5demo -p 80:80 -p 443:443 -d ', parameters('appContainerName'), '')]",
    "imageReference": {
      "offer": "0001-com-ubuntu-server-focal",
      "publisher": "Canonical",
      "sku": "20_04-lts",
      "version": "latest"
    },
    "nicName": "[concat(variables('vmName'), '-nic')]",
    "networkSecurityGroup": {
      "id": "[parameters('nsgId')]"
    },
    "publicIPAddressType": "Static",
    "storageAccountType": "Standard_LRS",
    "storageName": "[concat(uniqueString(resourceGroup().name, resourceGroup().id, deployment().name), 'data000')]",
    "subscriptionID": "[subscription().subscriptionId]",
    "vmName": "[concat(parameters('instanceName'), '-app-vm')]",
    "vmssName": "[concat(parameters('instanceName'), '-app-vmss')]"
  },
  "resources": [
    {
      "apiVersion": "[variables('storageApiVersion')]",
      "kind": "Storage",
      "location": "[resourceGroup().location]",
      "name": "[variables('storageName')]",
      "properties": {
        "supportsHttpsTrafficOnly": true
      },
      "sku": {
        "name": "[variables('storageAccountType')]",
        "tier": "Standard"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Storage/storageAccounts"
    },
    {
      "apiVersion": "[variables('networkApiVersion')]",
      "condition": "[not(parameters('createAutoscaleGroup'))]",
      "location": "[resourceGroup().location]",
      "name": "[variables('nicName')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "[concat(variables('vmName'), '-ipconfig1')]",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[parameters('subnetId')]"
              }
            }
          }
        ],
        "networkSecurityGroup": "[if(empty(parameters('nsgId')), json('null'), variables('networkSecurityGroup'))]"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Network/networkInterfaces"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "condition": "[not(parameters('createAutoscaleGroup'))]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]",
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('vmName')]",
      "properties": {
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[concat('https://', variables('storageName'), '.blob.core.windows.net')]"
          }
        },
        "hardwareProfile": {
          "vmSize": "[parameters('instanceType')]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('nicName'))]"
            }
          ]
        },
        "osProfile": {
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": true,
            "ssh": {
              "publicKeys": [
                {
                  "keyData": "[parameters('sshKey')]",
                  "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                }
              ]
            }
          },
          "computerName": "[variables('vmName')]",
          "customData": "[base64(variables('cloudInit'))]"
        },
        "storageProfile": {
          "imageReference": "[variables('imageReference')]",
          "osDisk": {
            "createOption": "fromImage",
            "caching": "ReadWrite"
          }
        }
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Compute/virtualMachines"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "condition": "[and(not(empty(parameters('appContainerName'))), not(parameters('createAutoscaleGroup')))]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[concat(variables('vmName'),'/vmInit')]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "settings": {
          "commandToExecute": "[variables('commandToExecute')]"
        },
        "type": "CustomScript",
        "typeHandlerVersion": "2.0"
      },
      "type": "Microsoft.Compute/virtualMachines/extensions"
    },
    {
      "apiVersion": "[variables('computeApiVersion')]",
      "condition": "[parameters('createAutoscaleGroup')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageName'))]"
      ],
      "location": "[resourceGroup().location]",
      "name": "[variables('vmssName')]",
      "properties": {
        "overprovision": "false",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "extensionProfile": {
            "extensions": [
              {
                "name": "vmInit",
                "properties": {
                  "autoUpgradeMinorVersion": true,
                  "publisher": "Microsoft.Azure.Extensions",
                  "settings": {
                    "commandToExecute": "[variables('commandToExecute')]"
                  },
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0"
                }
              }
            ]
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic1",
                "properties": {
                  "ipConfigurations": [
                    {
                      "name": "ipconfig1",
                      "properties": {
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      }
                    }
                  ],
                  "networkSecurityGroup": "[if(empty(parameters('nsgId')), json('null'), variables('networkSecurityGroup'))]",
                  "primary": true
                }
              }
            ]
          },
          "osProfile": {
            "adminUsername": "[parameters('adminUsername')]",
            "computerNamePrefix": "[variables('vmssName')]",
            "customData": "[base64(variables('cloudInit'))]",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "keyData": "[parameters('sshKey')]",
                    "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                  }
                ]
              }
            }
          },
          "storageProfile": {
            "imageReference": "[variables('imageReference')]",
            "osDisk": {
              "createOption": "FromImage",
              "caching": "ReadWrite"
            }
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[concat('https://', variables('storageName'), '.blob.core.windows.net')]"
            }
          }
        }
      },
      "sku": {
        "capacity": 2,
        "name": "[parameters('instanceType')]",
        "tier": "Standard"
      },
      "tags": "[if(empty(parameters('tagValues')), json('null'), parameters('tagValues'))]",
      "type": "Microsoft.Compute/virtualMachineScaleSets"
    },
    {
      "apiVersion": "2015-04-01",
      "condition": "[parameters('createAutoscaleGroup')]",
      "type": "Microsoft.Insights/autoscaleSettings",
      "name": "[concat(variables('vmssName'), '-autoscaleconfig')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
      ],
      "properties": {
        "name": "[concat(variables('vmssName'), '-autoscaleconfig')]",
        "targetResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]",
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "2",
              "maximum": "10",
              "default": "2"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "GreaterThan",
                  "threshold": 60
                },
                "scaleAction": {
                  "direction": "Increase",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT1M"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "Percentage CPU",
                  "metricNamespace": "",
                  "metricResourceUri": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]",
                  "timeGrain": "PT1M",
                  "statistic": "Average",
                  "timeWindow": "PT5M",
                  "timeAggregation": "Average",
                  "operator": "LessThan",
                  "threshold": 30
                },
                "scaleAction": {
                  "direction": "Decrease",
                  "type": "ChangeCount",
                  "value": "1",
                  "cooldown": "PT5M"
                }
              }
            ]
          }
        ]
      }
    }
  ],
  "outputs": {
    "appIp": {
      "condition": "[not(parameters('createAutoscaleGroup'))]",
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('nicName')),'2020-06-01').ipConfigurations[0].properties.privateIPAddress]"
    },
    "vmName": {
      "condition": "[not(parameters('createAutoscaleGroup'))]",
      "type": "string",
      "value": "[variables('vmName')]"
    },
    "resourceGroupName": {
      "condition": "[parameters('createAutoscaleGroup')]",
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "vmssId": {
      "condition": "[parameters('createAutoscaleGroup')]",
      "type": "string",
      "value": "[concat('/subscriptions/',subscription().subscriptionId, '/resourceGroups/',  resourceGroup().name, '/providers/Microsoft.Compute/virtualMachineScaleSets/', variables('vmssName'))]"
    },
    "vmssName": {
      "condition": "[parameters('createAutoscaleGroup')]",
      "type": "string",
      "value": "[variables('vmssName')]"
    }
  }
}
